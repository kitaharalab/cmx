package jp.crestmuse.cmx.commands;
import java.io.*;
import java.util.*;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import org.w3c.dom.*;
import jp.crestmuse.cmx.handlers.*;
import jp.crestmuse.cmx.filewrappers.*;
import jp.crestmuse.cmx.misc.*;

public class SCCTest extends CMXCommand {

    private int ticksPerBeat;

    protected void run() 
	throws IOException, ParserConfigurationException, 
	       TransformerException, SAXException, InvalidFileTypeException {
	readInputData();
	newOutputData("MIDIFile");
	((SCCXMLWrapper)indata()).processNotes(new SCCTestHandler());
	writeOutputData();
	((MIDIXMLWrapper)outdata()).writefileAsSMF("tmp.mid");
    }

    public static void main(String[] args) {
	SCCTest t = new SCCTest();
	try {
	    CMXFileWrapper.addClassTable
		("scc", "jp.crestmuse.cmx.filewrappers.SCCXMLWrapper");
	    t.start(args);
	} catch (Exception e) {
	    t.showErrorMessage(e);
	    System.exit(1);
	}
    }

    private class SCCTestHandler implements SCCHandler {
	private int currentTrack = 1;
	public void beginHeader(SCCXMLWrapper w) {
	}

	public void endHeader(SCCXMLWrapper w) {
	    try {
		((MIDIXMLWrapper)outdata()).addElementsFirstForFormat1
		    (((SCCXMLWrapper)indata()).getNumOfParts(), ticksPerBeat);
	    } catch (TransformerException e) {
		throw new InvalidElementException(e.toString());
	    }
	}

	public void processHeaderElement(String name, String content, 
					 SCCXMLWrapper w) {
	    if (name.equals("DELTA")) 
		ticksPerBeat = Integer.parseInt(content);
	}

	public void beginPart(SCCXMLWrapper.Part part, SCCXMLWrapper w) {
	    ((MIDIXMLWrapper)outdata()).newTrack(currentTrack);
	    //	    SortedSet<SCCXMLWrapper.Note> sn = part.getSortedNoteSet();
	    MIDIEventList el = part.toMIDIEventList();
	    for (MIDIEventList.MIDIEvent e : el) {
	        System.out.println(e.time() + " " + e.status() + " " + 
				   e.value1() + " " + e.value2());
	    }
	    ((MIDIXMLWrapper)outdata()).addMIDIChannelMessages(el);
	}

	public void endPart(SCCXMLWrapper.Part part, SCCXMLWrapper w) {
	    ((MIDIXMLWrapper)outdata()).endTrack();
	    currentTrack++;
	}

	public void processNote(SCCXMLWrapper.Note note, 
				SCCXMLWrapper.Part part, SCCXMLWrapper w) {
	    System.out.println(note.onset() + "\t" + note.offset() + 
			       "\t" + note.notenum() + "\t" + note.velocity());
	}
    }
}