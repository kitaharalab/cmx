package jp.crestmuse.cmx.commands;

import java.io.*;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import org.w3c.dom.*;
import jp.crestmuse.cmx.handlers.*;
import jp.crestmuse.cmx.filewrappers.*;
import jp.crestmuse.cmx.nodeinterfaces.*;

public class CMXTest extends CMXCommand {

  protected void run() 
	throws IOException, ParserConfigurationException, 
		TransformerException, SAXException, InvalidFileTypeException {
    readInputData();
    newOutputData("score-partwise");
    MusicXMLWrapper musicxml = 
	((DeviationInstanceWrapper)indata()).getTargetMusicXML();
    indata().addLinks("//note-deviation", musicxml);
    NoteHandlerPartwise handler = new TestHandler();
    musicxml.processNotePartwise(handler);
    writeOutputData();
  }

  public static void main(String[] args) {
    CMXTest c = new CMXTest();
    try {
      c.start(args);
    } catch (Exception e) {
      c.showErrorMessage(e);
      System.exit(1);
    }
  }

  private class TestHandler implements NoteHandlerPartwise {
    public void beginPart(Node partnode, MusicXMLWrapper wrapper) {
      outdata().addChild("part");
      outdata().setAttribute("id", ((Element)partnode).getAttribute("id"));
    }

    public void endPart(Node partnode, MusicXMLWrapper wrapper) {
      outdata().returnToParent();
    }

    public void beginMeasure(Node measurenode, Node partnode, 
                             MusicXMLWrapper wrapper) {
      outdata().addChild("measure");
      outdata().setAttribute("number", 
                   ((Element)measurenode).getAttribute("number"));
    }

    public void endMeasure(Node measurenode, Node Partnode, 
                           MusicXMLWrapper wrapper) {
      outdata().returnToParent();
    }

    public void processNote(Node notenode, Node measurenode, Node partnode, 
				MusicXMLWrapper wrapper) {
      outdata().addChild(notenode);
      Node linkednode = 
          wrapper.linkmanager.getNodeLinkedTo(notenode, "note-deviation");
      if (linkednode != null) {
        NoteDeviation nd = NoteDeviation.getInterface(linkednode);
        outdata().setAttribute("attack", nd.attack());
        outdata().setAttribute("release", nd.release());
        outdata().setAttribute("dynamics", (int)nd.dynamics());
        outdata().setAttribute("end-dynamics", (int)nd.endDynamics());
      }
      outdata().returnToParent();
    }
  }


}